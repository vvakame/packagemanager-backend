// Generated by dts-bundle v0.2.0
// Dependencies for this module:
//   typings/node/node.d.ts
//   node_modules/fs-git/fs-git.d.ts

declare module 'packagemanager-backend' {
    export import Manager = require("packagemanager-backend/lib/manager");
    export import Repo = require("packagemanager-backend/lib/repo");
    export import Result = require("packagemanager-backend/lib/result");
    export import ResolvedDependency = require("packagemanager-backend/lib/resolvedDependency");
    import model = require("packagemanager-backend/lib/model");
    export import ManagerOptions = model.ManagerOptions;
    export import RepositorySpec = model.RepositorySpec;
    export import SSHInfo = model.SSHInfo;
    export import SearchOptions = model.SearchOptions;
    export import SearchResult = model.SearchResult;
    export import Recipe = model.Recipe;
    export import Dependency = model.Dependency;
}

declare module 'packagemanager-backend/lib/manager' {
    import Repo = require("packagemanager-backend/lib/repo");
    import Result = require("packagemanager-backend/lib/result");
    import m = require("packagemanager-backend/lib/model");
    class Manager<T> {
        static createManager<T>(options: m.ManagerOptions): Promise<Manager<T>>;
        baseDir: string;
        repos: Repo[];
        _check(options: m.ManagerOptions): void;
        _resolveBaseDir(options: m.ManagerOptions): void;
        _resolveRepos(options: m.ManagerOptions): Promise<Repo[]>;
        fetchAllRepos(): Promise<Manager<T>>;
        search(opts?: m.SearchOptions): Promise<m.SearchResult[]>;
        getByRecipe(recipe: m.Recipe): Promise<Result>;
        pickRepo(dep: m.Dependency): Repo;
        saveConfig(data: T): void;
        loadConfig(): T;
    }
    export = Manager;
}

declare module 'packagemanager-backend/lib/repo' {
    import url = require("url");
    import fsgit = require("fs-git");
    import m = require("packagemanager-backend/lib/model");
    class Repo {
        spec: m.RepositorySpec;
        static createRepo(baseDir: string, spec: m.RepositorySpec): Repo;
        urlInfo: url.Url;
        sshInfo: m.SSHInfo;
        targetDir: string;
        networkConnectivity: boolean;
        fetchError: string;
        alreadyTryFetchAll: boolean;
        constructor(spec: m.RepositorySpec);
        _resolveTargetDir(baseDir: string): void;
        fetchIfNotInitialized(): Promise<Repo>;
        fetchAll(): Promise<Repo>;
        _buildCommand(...args: string[]): string;
        open(ref?: string): Promise<fsgit.FSGit>;
    }
    export = Repo;
}

declare module 'packagemanager-backend/lib/result' {
    import Manager = require("packagemanager-backend/lib/manager");
    import ResolvedDependency = require("packagemanager-backend/lib/resolvedDependency");
    import m = require("packagemanager-backend/lib/model");
    class Result {
        manager: Manager<{}>;
        recipe: m.Recipe;
        dependencies: {
            [depName: string]: ResolvedDependency;
        };
        _current: ResolvedDependency;
        constructor(manager: Manager<{}>, recipe: m.Recipe);
        pushAdditionalDependency(depName: string, dep: m.Dependency): void;
        toDepNameAndPath(relativePath: string): {
            depName: string;
            path: string;
        };
        resolveDependencies(): Promise<Result>;
        unresolvedDependencies: ResolvedDependency[];
        dependenciesList: ResolvedDependency[];
        toJSON(): any;
    }
    export = Result;
}

declare module 'packagemanager-backend/lib/resolvedDependency' {
    import fsgit = require("fs-git");
    import m = require("packagemanager-backend/lib/model");
    import Repo = require("packagemanager-backend/lib/repo");
    class ResolvedDependency {
        parent: ResolvedDependency;
        repo: string;
        ref: string;
        path: string;
        depName: string;
        repoInstance: Repo;
        error: any;
        fileInfo: fsgit.FileInfo;
        content: Buffer;
        dependencies: {
            [name: string]: ResolvedDependency;
        };
        constructor(parent: ResolvedDependency, dep?: m.Dependency);
        depth: number;
        cyclic: boolean;
        isCyclic(depName: string): boolean;
        toJSON(): any;
    }
    export = ResolvedDependency;
}

declare module 'packagemanager-backend/lib/model' {
    import fsgit = require("fs-git");
    import Repo = require("packagemanager-backend/lib/repo");
    import Result = require("packagemanager-backend/lib/result");
    import ResolvedDependency = require("packagemanager-backend/lib/resolvedDependency");
    export interface ManagerOptions {
        rootDir: string;
        repos: RepositorySpec[];
    }
    export interface RepositorySpec {
        url: string;
        ref?: string;
    }
    export interface SSHInfo {
        user: string;
        hostname: string;
        path: string;
    }
    export interface SearchOptions {
        globPattern?: string;
        globPatterns?: string[];
        regexpPattern?: RegExp;
        filter?: (result: SearchResult) => boolean;
    }
    export interface SearchResult {
        repo: Repo;
        fileInfo: fsgit.FileInfo;
    }
    export interface Recipe {
        baseRepo?: string;
        baseRef?: string;
        path: string;
        dependencies: {
            [name: string]: Dependency;
        };
        postProcessForDependency?(result: Result, depResult: ResolvedDependency, content: any): void;
    }
    export interface Dependency {
        repo?: string;
        ref?: string;
        path?: string;
    }
}

